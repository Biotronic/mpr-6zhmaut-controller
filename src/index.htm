<html>
<head>
    <title>Monoprice 6 Zone Home Audio MPR-6ZHMAUT</title>
    <link rel="stylesheet" href="index.css" type="text/css">
    <script>
        // https://stackoverflow.com/questions/332422/get-the-name-of-an-objects-type
        Object.prototype.getName = function() {
            let ctor = this.constructor.toString();
            let match = ctor.match(/function (\S+)\(/) ||
                        ctor.match(/class (\S+) /);
            return (match && match.length > 1) ? match[1] : "";
        };
        
        // https://stackoverflow.com/questions/35156270/static-constructor-in-javascript-es6
        const kebabize = (str) => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? "-" : "") + $.toLowerCase());
        
        // https://stackoverflow.com/questions/10730309/find-all-text-nodes-in-html-page
        function textNodes(el){
            let result = [];
            let walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
            while (n = walker.nextNode()) {
                result.push(n);
            }
            return result;
        }
        
        const registerCustomElement = (Type) => {
            let match = Type.toString().match(/function (\S+)\(/) ||
                        Type.toString().match(/class (\S+) /);
            customElements.define(kebabize(match[1]), Type);
        };
        
        class CustomElement extends HTMLElement {
            connectedCallback() {
                const template = document.getElementById(kebabize(this.getName())).content;
                this.appendChild(template.cloneNode(true));
                for (let text of textNodes(this)) {
                    let s = text.textContent;
                    let attrs = this.attributes;
                    for(let i = attrs.length - 1; i >= 0; i--) {
                        s = s.replace(`\$\{${attrs[i].name}\}`, attrs[i].value);
                    }
                    text.textContent = s;
                }
                let walker = document.createTreeWalker(this, NodeFilter.SHOW_ELEMENT, null, false);
                while (n = walker.nextNode()) {
                    let thatAttrs = n.attributes;
                    for(let j = thatAttrs.length - 1; j >= 0; j--) {
                        let s = thatAttrs[j].value;
                        let thisAttrs = this.attributes;
                        for(let i = thisAttrs.length - 1; i >= 0; i--) {
                            s = s.replace(`\$\{${thisAttrs[i].name}\}`, thisAttrs[i].value);
                        }
                        thatAttrs[j].value = s;
                    }
                }
            }
        }
        
        
        class AmpZone extends CustomElement {
            constructor() {
                super();
                
                this.zone    = 11;
                this.power   = false;
                this.pa      = false;
                this.mute    = false;
                this.dnd     = false;
                this.volume  = 20;
                this.treble  = 7;
                this.bass    = 7;
                this.balance = 10;
                this.source  = 1;
                this.reloading = 0;
            }
            
            connectedCallback() {
                super.connectedCallback();
                this.addEventListener('changed', this.changed);
                
                this.zone = this.attributes["zone"].value;
                
                this.hook('volume');
                this.hook('treble');
                this.hook('bass');
                this.hook('balance');
                this.hook('power');
                this.hook('pa');
                this.hook('mute');
                this.hook('dnd');
                
                this.hook('source');
                
                this.reload();
                setInterval(() => this.reload(), 500);
            }
            
            reload() {
                this.reloading++;
                fetch(`/api/zones/${this.zone}`, {
                        method: "GET"
                    }).then((response) => response.json()
                    ).then((data) => {
                        this.update("power",   data);
                        this.update("pa",      data);
                        this.update("mute",    data);
                        this.update("dnd",     data);
                        this.update("volume",  data);
                        this.update("treble",  data);
                        this.update("bass",    data);
                        this.update("balance", data);
                        this.update("source",  data);
                        
                        this.reloading--;
                    });
            }
            
            update(name, data) {
                this[name] = data[name];
                let node = this.querySelector(`#${name}_${this.zone} input`) || this.querySelector(`#${name}_${this.zone}`);
                if (node) {
                    node.value = data[name];
                    node.checked = data[name];
                    node.dispatchEvent(new Event('input'));
                } else {
                    let nodes = this.querySelectorAll(`*[name='${name}_${this.zone}']`);
                    nodes.forEach((node) => {
                        if (node.matches(`#${name}${data[name]}_${this.zone}`)) {
                            node.checked = true;
                        }
                    });
                }
            }
            
            hook(name) {
                let node = this.querySelector(`#${name}_${this.zone}`);
                if (node) {
                    node.addEventListener('change', (e) => {
                        if (this.reloading) return;
                        if (node.checked === undefined) {
                            this[name] = node.value;
                        } else {
                            this[name] = node.checked;
                        }
                        this.dispatchEvent(new CustomEvent('changed', { detail: { attributes: [name] } }));
                    });
                } else {
                    let nodes = this.querySelectorAll(`*[name='${name}_${this.zone}']`);
                    
                    nodes.forEach((node) => {
                        node.addEventListener('input', (e) => {
                            this[name] = node.value;
                            this.dispatchEvent(new CustomEvent('changed', { detail: { attributes: [name] } }));
                        });
                    });
                }
                
                let btnUp   = this.querySelector(`.${name}-up`);
                let btnStop = this.querySelector(`.${name}-stop`);
                let btnDown = this.querySelector(`.${name}-down`);
                if (btnUp)   {   btnUp.addEventListener('click', (e) => this.rampUp(name)); }
                if (btnStop) { btnStop.addEventListener('click', (e) => this.rampStop(name)); }
                if (btnDown) { btnDown.addEventListener('click', (e) => this.rampDown(name)); }
            }
            
            rampUp(name) {
                console.log(`/api/zones/${this.zone}/${name}/rampup`);
                fetch(`/api/zones/${this.zone}/${name}/rampup`, {
                    method: "POST",
                    headers: {'Content-Type': 'application/json'} ,
                    body: ""
                });
            }
            rampStop(name) {
                console.log(`/api/zones/${this.zone}/${name}/rampstop`);
                fetch(`/api/zones/${this.zone}/${name}/rampstop`, {
                    method: "POST",
                    headers: {'Content-Type': 'application/json'} ,
                    body: ""
                });
            }
            rampDown(name) {
                console.log(`/api/zones/${this.zone}/${name}/rampdown`);
                fetch(`/api/zones/${this.zone}/${name}/rampdown`, {
                    method: "POST",
                    headers: {'Content-Type': 'application/json'} ,
                    body: ""
                });
            }
            
            changed(e) {
                var zone = {
                    id: this.zone
                };
                for (let attr of e.detail.attributes) {
                    zone[attr] = typeof this[attr] == "boolean" ? (this[attr] ? 1 : 0) : this[attr];
                }
                fetch(`/api/zones/${this.zone}`, {
                    method: "POST",
                    headers: {'Content-Type': 'application/json'} ,
                    body: JSON.stringify(zone)
                });
            }
        }
        class KnobInput extends CustomElement {
            connectedCallback() {
                super.connectedCallback();
                this.querySelector("input").addEventListener('input', (e) => {
                    this.value = e.target.value;
                    const event = new CustomEvent('change', {
                        value: e.target.value
                    });
                    this.dispatchEvent(event);
                });
            }
        }
        
        registerCustomElement(AmpZone);
        registerCustomElement(KnobInput);
    </script>
</head>
<body>
    <template id="amp-zone">
        <div class="buttons">
            <label for="power_${zone}"><input type="checkbox" id="power_${zone}">Power         </label>
            <label for="pa_${zone}"   ><input type="checkbox" id="pa_${zone}"   >PA            </label>
            <label for="mute_${zone}" ><input type="checkbox" id="mute_${zone}" >Mute          </label>
            <label for="dnd_${zone}"  ><input type="checkbox" id="dnd_${zone}"  >Do not disturb</label>
        </div>
        <div class="knobs">
            <div>
                <knob-input min="0" max="38" value="20" title="Volume"  id="volume_${zone}" ></knob-input>
                <div>
                    <button class="volume-up">^</button>
                    <button class="volume-stop">-</button>
                    <button class="volume-down">v</button>
                </div>
            </div>
            <div>
                <knob-input min="0" max="14" value="7"  title="Treble"  id="treble_${zone}" ></knob-input>
                <div>
                    <button class="treble-up">^</button>
                    <button class="treble-stop">-</button>
                    <button class="treble-down">v</button>
                </div>
            </div>
            <div>
                <knob-input min="0" max="14" value="7"  title="Bass"    id="bass_${zone}"   ></knob-input>
                <div>
                    <button class="bass-up">^</button>
                    <button class="bass-stop">-</button>
                    <button class="bass-down">v</button>
                </div>
            </div>
            <div>
                <knob-input min="0" max="20" value="10" title="Balance" id="balance_${zone}"></knob-input>
                <div>
                    <button class="balance-up">^</button>
                    <button class="balance-stop">-</button>
                    <button class="balance-down">v</button>
                </div>
            </div>
        </div>
        <div class="sources">
            <label for="source1_${zone}"><input type="radio" name="source_${zone}" id="source1_${zone}" value="1">Source 1</label>
            <label for="source2_${zone}"><input type="radio" name="source_${zone}" id="source2_${zone}" value="2">Source 2</label>
            <label for="source3_${zone}"><input type="radio" name="source_${zone}" id="source3_${zone}" value="3">Source 3</label>
            <label for="source4_${zone}"><input type="radio" name="source_${zone}" id="source4_${zone}" value="4">Source 4</label>
            <label for="source5_${zone}"><input type="radio" name="source_${zone}" id="source5_${zone}" value="5">Source 5</label>
            <label for="source6_${zone}"><input type="radio" name="source_${zone}" id="source6_${zone}" value="6">Source 6</label>
        </div>
    </template>
    <template id="knob-input">
        <input type="number" id="knob" value="${value}" min="${min}" max="${max}" step="1">
        <label for="knob" accesskey="k">${title}</label>
    </template>
    <amp-zone zone="11"></amp-zone>
    <amp-zone zone="12"></amp-zone>
    <amp-zone zone="13"></amp-zone>
    <amp-zone zone="14"></amp-zone>
    <amp-zone zone="15"></amp-zone>
    <amp-zone zone="16"></amp-zone>
    
    <script src="index.js" defer></script>
</body>
</html>